// Hardcoded benchmark for HVM3 regex implementation
data Term { #Var{idx} #Pol{bod} #All{inp bod} #Lam{bod} #App{fun arg} #U32 #Num{val} }

// Pattern types for the regex engine
data Pattern { 
  #Lit{val}             // Literal character
  #Cat{a b}             // Concatenation
  #Alt{a b}             // Alternation
  #Rep{p}               // Repetition (*)
}

// Match result
data Result { #Match #NoMatch }

// Match simple literals
@match_lit = #Match

// Match concatenation 
@match_cat(a b) = ~ a {
  #Match: b
  #NoMatch: #NoMatch
}

// Match alternation
@match_alt(a b) = ~ a {
  #Match: #Match
  #NoMatch: b
}

// Match repetition - simplified (* operator)
@match_rep = #Match  // Always matches

// Simple pattern matcher (hard-coded 'a')
@match_simple = @match_lit

// Medium pattern matcher (hard-coded 'abc')
@match_medium = 
  ! res_a = @match_lit
  ! res_b = @match_lit
  ! res_ab = @match_cat(res_a res_b)
  ! res_c = @match_lit
  @match_cat(res_ab res_c)

// Complex pattern matcher (hard-coded '(a|b)*c')
@match_complex = 
  ! res_a = @match_lit
  ! res_b = @match_lit
  ! res_ab = @match_alt(res_a res_b)
  ! res_star = @match_rep
  ! res_c = @match_lit
  @match_cat(res_star res_c)

// Benchmark functions for counting operations

// Function to perform N simple pattern operations
@count_simple(count) = 
  ! v1 = @match_simple
  ! v2 = @match_simple
  ! v3 = @match_simple
  ! v4 = @match_simple
  ! v5 = @match_simple
  ! v6 = @match_simple
  ! v7 = @match_simple
  ! v8 = @match_simple
  ! v9 = @match_simple
  ! v10 = @match_simple
  ! v11 = @match_simple
  ! v12 = @match_simple
  ! v13 = @match_simple
  ! v14 = @match_simple
  ! v15 = @match_simple
  ! v16 = @match_simple
  ! v17 = @match_simple
  ! v18 = @match_simple
  ! v19 = @match_simple
  ! v20 = @match_simple
  ! v21 = @match_simple
  ! v22 = @match_simple
  ! v23 = @match_simple
  ! v24 = @match_simple
  ! v25 = @match_simple
  ! v26 = @match_simple
  ! v27 = @match_simple
  ! v28 = @match_simple
  ! v29 = @match_simple
  ! v30 = @match_simple
  ! v31 = @match_simple
  ! v32 = @match_simple
  ! v33 = @match_simple
  ! v34 = @match_simple
  ! v35 = @match_simple
  ! v36 = @match_simple
  ! v37 = @match_simple
  ! v38 = @match_simple
  ! v39 = @match_simple
  ! v40 = @match_simple
  ! v41 = @match_simple
  ! v42 = @match_simple
  ! v43 = @match_simple
  ! v44 = @match_simple
  ! v45 = @match_simple
  ! v46 = @match_simple
  ! v47 = @match_simple
  ! v48 = @match_simple
  ! v49 = @match_simple
  ! v50 = @match_simple
  ! v51 = @match_simple
  ! v52 = @match_simple
  ! v53 = @match_simple
  ! v54 = @match_simple
  ! v55 = @match_simple
  ! v56 = @match_simple
  ! v57 = @match_simple
  ! v58 = @match_simple
  ! v59 = @match_simple
  ! v60 = @match_simple
  ! v61 = @match_simple
  ! v62 = @match_simple
  ! v63 = @match_simple
  ! v64 = @match_simple
  ! v65 = @match_simple
  ! v66 = @match_simple
  ! v67 = @match_simple
  ! v68 = @match_simple
  ! v69 = @match_simple
  ! v70 = @match_simple
  ! v71 = @match_simple
  ! v72 = @match_simple
  ! v73 = @match_simple
  ! v74 = @match_simple
  ! v75 = @match_simple
  ! v76 = @match_simple
  ! v77 = @match_simple
  ! v78 = @match_simple
  ! v79 = @match_simple
  ! v80 = @match_simple
  ! v81 = @match_simple
  ! v82 = @match_simple
  ! v83 = @match_simple
  ! v84 = @match_simple
  ! v85 = @match_simple
  ! v86 = @match_simple
  ! v87 = @match_simple
  ! v88 = @match_simple
  ! v89 = @match_simple
  ! v90 = @match_simple
  ! v91 = @match_simple
  ! v92 = @match_simple
  ! v93 = @match_simple
  ! v94 = @match_simple
  ! v95 = @match_simple
  ! v96 = @match_simple
  ! v97 = @match_simple
  ! v98 = @match_simple
  ! v99 = @match_simple
  ! v100 = @match_simple
  100  // Return the count of operations

// Function to perform N medium pattern operations
@count_medium(count) = 
  ! v1 = @match_medium
  ! v2 = @match_medium
  ! v3 = @match_medium
  ! v4 = @match_medium
  ! v5 = @match_medium
  ! v6 = @match_medium
  ! v7 = @match_medium
  ! v8 = @match_medium
  ! v9 = @match_medium
  ! v10 = @match_medium
  ! v11 = @match_medium
  ! v12 = @match_medium
  ! v13 = @match_medium
  ! v14 = @match_medium
  ! v15 = @match_medium
  ! v16 = @match_medium
  ! v17 = @match_medium
  ! v18 = @match_medium
  ! v19 = @match_medium
  ! v20 = @match_medium
  ! v21 = @match_medium
  ! v22 = @match_medium
  ! v23 = @match_medium
  ! v24 = @match_medium
  ! v25 = @match_medium
  ! v26 = @match_medium
  ! v27 = @match_medium
  ! v28 = @match_medium
  ! v29 = @match_medium
  ! v30 = @match_medium
  ! v31 = @match_medium
  ! v32 = @match_medium
  ! v33 = @match_medium
  ! v34 = @match_medium
  ! v35 = @match_medium
  ! v36 = @match_medium
  ! v37 = @match_medium
  ! v38 = @match_medium
  ! v39 = @match_medium
  ! v40 = @match_medium
  ! v41 = @match_medium
  ! v42 = @match_medium
  ! v43 = @match_medium
  ! v44 = @match_medium
  ! v45 = @match_medium
  ! v46 = @match_medium
  ! v47 = @match_medium
  ! v48 = @match_medium
  ! v49 = @match_medium
  ! v50 = @match_medium
  100  // Return the count of operations

// Function to perform N complex pattern operations
@count_complex(count) = 
  ! v1 = @match_complex
  ! v2 = @match_complex
  ! v3 = @match_complex
  ! v4 = @match_complex
  ! v5 = @match_complex
  ! v6 = @match_complex
  ! v7 = @match_complex
  ! v8 = @match_complex
  ! v9 = @match_complex
  ! v10 = @match_complex
  ! v11 = @match_complex
  ! v12 = @match_complex
  ! v13 = @match_complex
  ! v14 = @match_complex
  ! v15 = @match_complex
  ! v16 = @match_complex
  ! v17 = @match_complex
  ! v18 = @match_complex
  ! v19 = @match_complex
  ! v20 = @match_complex
  ! v21 = @match_complex
  ! v22 = @match_complex
  ! v23 = @match_complex
  ! v24 = @match_complex
  ! v25 = @match_complex
  50  // Return the count of operations

// List data structure
data List { #Nil #Cons{head tail} }

// Run all benchmarks
@run_all = 
  ! simple_ops = @count_simple(100)   // 100 simple operations
  ! medium_ops = @count_medium(100)   // 100 medium operations
  ! complex_ops = @count_complex(50)  // 50 complex operations (more expensive)
  
  // Return total count
  (+ (+ simple_ops medium_ops) complex_ops)

// Main function
@main = ~ (#Pol{123}) {
  #Var{idx}: *
  #Pol{bod}:
    // Run all benchmarks
    @run_all
  #All{inp bod}: *
  #Lam{bod}: *
  #App{fun arg}: *
  #U32: *
  #Num{val}: *
}