// HVM3 Regex Engine - Pure HVM3 implementation of regex matching
// Following HVM's variable usage rules and idiomatic patterns

// Pattern data types - Keep this simple and focused on core regex features
data Pattern {
  #Literal { text }        // Literal string match
  #Char { char }           // Single character match
  #CharClass { chars }     // Character class (e.g., [a-z])
  #NegatedClass { chars }  // Negated character class (e.g., [^a-z])
  #Concat { first second } // Sequential patterns (a then b)
  #Choice { left right }   // Alternative patterns (a or b)
  #Star { pattern }        // Zero or more repetitions (a*)
  #Plus { pattern }        // One or more repetitions (a+)
  #Optional { pattern }    // Optional pattern (a?)
  #Repeat { pattern min max } // Specific repetition count (a{n,m})
  #Anchor { type }         // Anchors like ^ and $
}

// Match result data type
data MatchResult {
  #Match { start length }  // Successful match with position and length
  #NoMatch                 // Failed match
}

// Anchor types
data AnchorType {
  #Start     // Beginning of string (^)
  #End       // End of string ($)
  #WordBound // Word boundary (\b)
}

// String representation as character list
data CharList {
  #Nil
  #Cons { head tail }
}

// ===== Core Matching Functions =====

// Main match function that selects the appropriate matcher based on pattern type
@match(pattern str pos) = ~pattern {
  #Literal{text}: @match_literal(text str pos)
  #Char{char}: @match_char(char str pos)
  #CharClass{chars}: @match_charclass(chars 0 str pos)  // 0 = not negated
  #NegatedClass{chars}: @match_charclass(chars 1 str pos)  // 1 = negated
  #Concat{first second}: @match_concat(first second str pos)
  #Choice{left right}: @match_choice(left right str pos)
  #Star{pattern}: @match_star(pattern str pos 0)
  #Plus{pattern}: @match_plus(pattern str pos)
  #Optional{pattern}: @match_optional(pattern str pos)
  #Repeat{pattern min max}: @match_repeat(pattern min max str pos 0)
  #Anchor{type}: @match_anchor(type str pos)
}

// Match a literal string at the given position
@match_literal(lit str pos) =
  // First check if string has enough characters left
  let str_len = @strlen(str)
  let lit_len = @strlen(lit)
  
  ~(>= (- str_len pos) lit_len) {
    true: 
      // Check if literal matches at this position
      ~@is_prefix(lit str pos) {
        true: #Match{pos lit_len}
        false: #NoMatch
      }
    false: #NoMatch
  }

// Match a single character
@match_char(ch str pos) =
  let str_len = @strlen(str)
  
  ~(< pos str_len) {
    true:
      let c = @char_at(str pos)
      ~(== ch c) {
        true: #Match{pos 1}
        false: #NoMatch
      }
    false: #NoMatch
  }

// Match a character class (or negated class)
@match_charclass(chars negated str pos) =
  let str_len = @strlen(str)
  
  ~(< pos str_len) {
    true:
      let c = @char_at(str pos)
      let in_class = @char_in_class(c chars)
      
      // XOR logic: match if (in_class AND NOT negated) OR (NOT in_class AND negated)
      ~(|| (&& in_class (== negated 0)) (&& (== in_class 0) (== negated 1))) {
        true: #Match{pos 1}
        false: #NoMatch
      }
    false: #NoMatch
  }

// Match concatenation (first pattern then second)
@match_concat(first second str pos) =
  // Try to match the first pattern
  let first_result = @match(first str pos)
  
  ~first_result {
    #Match{start length}:
      // First pattern matched, now try the second pattern
      let new_pos = (+ pos length)
      let second_result = @match(second str new_pos)
      
      ~second_result {
        #Match{second_start second_length}:
          // Both patterns matched, combine the results
          #Match{pos (+ length second_length)}
        #NoMatch: #NoMatch
      }
    #NoMatch: #NoMatch
  }

// Match alternatives (either left or right pattern) using HVM's parallelism
@match_choice(left right str pos) =
  // Try both patterns in parallel - HVM will automatically evaluate both branches
  // in parallel due to its evaluation strategy
  let left_result = @match(left str pos)
  let right_result = @match(right str pos)
  
  // Check results in order of priority
  ~left_result {
    #Match{start length}: 
      // Left pattern matched, return it (prioritize left pattern)
      left_result  
    #NoMatch: 
      // Left didn't match, return right result (already computed in parallel)
      right_result
  }

// Match zero or more occurrences (non-greedy implementation) with superposition
@match_star(pattern str pos total_len) =
  // First try to match current position
  let result = @match(pattern str pos)
  
  ~result {
    #Match{start length}: 
      // Current occurrence matched, try to match more
      let new_pos = (+ pos length)
      let new_total = (+ total_len length)
      
      // Avoid infinite recursion by checking if we made progress
      ~(> length 0) {
        true: 
          // Create a superposition for each possible match length
          // HVM will explore all possibilities in parallel
          #SUP{
            // Option 1: Stop here with current matches
            #Match{pos total_len}
            
            // Option 2: Continue matching
            @match_star(pattern str new_pos new_total)
          }
        false: #Match{pos total_len}  // Zero-width match - stop to avoid infinite loop
      }
    #NoMatch: #Match{pos total_len}  // No more matches, return what we've matched so far
  }

// Match one or more occurrences with superposition
@match_plus(pattern str pos) =
  // Must match at least once
  let first = @match(pattern str pos)
  
  ~first {
    #Match{start length}:
      // First matched, now try for more
      let new_pos = (+ pos length)
      
      // Try both options in parallel using superposition
      #SUP{
        // Option 1: Just this one match
        first
        
        // Option 2: Match more occurrences
        let rest = @match_star(pattern str new_pos length)
        ~rest {
          #Match{rest_start rest_length}: #Match{pos (+ length rest_length)}
          #NoMatch: first
        }
      }
    #NoMatch: #NoMatch
  }

// Match optional pattern (zero or one occurrence)
@match_optional(pattern str pos) =
  let result = @match(pattern str pos)
  
  ~result {
    #Match{start length}: result  // Pattern matched
    #NoMatch: #Match{pos 0}       // No match, but that's OK for optional
  }

// Match specific number of repetitions
@match_repeat(pattern min max str pos count) =
  // Check if we've reached maximum repetitions
  ~(&& (>= count min) (|| (== max -1) (<= count max))) {
    true:
      // We've matched enough times, try to match one more if below max
      ~(|| (== max -1) (< count max)) {
        true:
          // Try to match one more time
          let result = @match(pattern str pos)
          ~result {
            #Match{start length}:
              // Matched, continue with more repetitions
              let new_pos = (+ pos length)
              let new_count = (+ count 1)
              
              // Create superposition to allow backtracking
              #SUP{
                // Option 1: Stop here if we've matched at least min times
                #Match{pos (* count length)}
                
                // Option 2: Continue matching if we can
                @match_repeat(pattern min max str new_pos new_count)
              }
            #NoMatch: 
              // Couldn't match more, return if we've matched at least min times
              ~(>= count min) {
                true: #Match{pos (* count length)}
                false: #NoMatch
              }
          }
        false:
          // At maximum repetitions, return successful match
          #Match{pos (* count length)}
      }
    false:
      // Haven't reached minimum repetitions yet
      let result = @match(pattern str pos)
      ~result {
        #Match{start length}:
          // Matched, continue with more repetitions
          let new_pos = (+ pos length)
          let new_count = (+ count 1)
          @match_repeat(pattern min max str new_pos new_count)
        #NoMatch: #NoMatch  // Failed to match minimum repetitions
      }
  }

// Match anchor patterns
@match_anchor(type str pos) = ~type {
  #Start:
    // Beginning of string anchor
    ~(== pos 0) {
      true: #Match{pos 0}  // Zero-width match at start
      false: #NoMatch
    }
  #End:
    // End of string anchor
    let str_len = @strlen(str)
    ~(== pos str_len) {
      true: #Match{pos 0}  // Zero-width match at end
      false: #NoMatch
    }
  #WordBound:
    // Word boundary implementation
    let is_at_bound = @check_word_boundary(str pos)
    ~is_at_bound {
      true: #Match{pos 0}  // Zero-width match at boundary
      false: #NoMatch
    }
}

// ===== Helper Functions =====

// String manipulation functions
// For future optimization, these should be implemented as external C functions
// using the @extern directive for better performance

// Get string length - more efficient implementation
@strlen(str) = 
  // Use the built-in length function instead of recursion
  len(str)

// Get character at position - more efficient implementation
@char_at(str pos) = 
  // Check bounds first
  ~(< pos (len str)) {
    true: 
      // Use the built-in substring function to get a single character
      substr(str pos 1)
    false: 
      // Return null character for out of bounds
      '\0'
  }

// Check if a character is in a character class - more efficient implementation
@char_in_class(c chars) =
  // Iterative search through character class
  @char_in_class_iter(c, chars, 0, (len chars))

// Helper function to iterate through character class
@char_in_class_iter(c, chars, i, len) =
  ~(< i len) {
    true:
      // Compare current character
      let curr = @char_at(chars i)
      ~(== c curr) {
        true: 1  // Found the character
        false: @char_in_class_iter(c, chars, (+ i 1), len)  // Continue search
      }
    false: 0  // Not found after checking all characters
  }

// Check if a literal is a prefix of string at position - more efficient implementation
@is_prefix(lit str pos) =
  // Check if the literal fits in the remaining string
  let lit_len = (len lit)
  let str_len = (len str)
  
  ~(> (+ pos lit_len) str_len) {
    true: 0  // Not enough characters left in string
    false:
      // Get the substring to compare
      let substr_to_check = (substr str pos lit_len)
      ~(== substr_to_check lit) {
        true: 1  // Exact match
        false: 0  // No match
      }
  }

// Check if position is at a word boundary
@check_word_boundary(str pos) =
  let str_len = @strlen(str)
  
  // At start of string and first char is word char
  ~(== pos 0) {
    true: 
      ~(< pos str_len) {
        true: @is_word_char(@char_at(str pos))
        false: 0
      }
    false:
      // At end of string and last char is word char
      ~(== pos str_len) {
        true: @is_word_char(@char_at(str (- pos 1)))
        false:
          // Middle of string - check if word/non-word boundary
          let prev_is_word = @is_word_char(@char_at(str (- pos 1)))
          let curr_is_word = @is_word_char(@char_at(str pos))
          (!= prev_is_word curr_is_word)  // Different character types = boundary
      }
  }

// Check if character is a word character (alphanumeric or underscore)
@is_word_char(c) = ~c {
  'a': 1 'b': 1 'c': 1 'd': 1 'e': 1 'f': 1 'g': 1 'h': 1 'i': 1
  'j': 1 'k': 1 'l': 1 'm': 1 'n': 1 'o': 1 'p': 1 'q': 1 'r': 1
  's': 1 't': 1 'u': 1 'v': 1 'w': 1 'x': 1 'y': 1 'z': 1
  'A': 1 'B': 1 'C': 1 'D': 1 'E': 1 'F': 1 'G': 1 'H': 1 'I': 1
  'J': 1 'K': 1 'L': 1 'M': 1 'N': 1 'O': 1 'P': 1 'Q': 1 'R': 1
  'S': 1 'T': 1 'U': 1 'V': 1 'W': 1 'X': 1 'Y': 1 'Z': 1
  '0': 1 '1': 1 '2': 1 '3': 1 '4': 1 '5': 1 '6': 1 '7': 1 '8': 1 '9': 1
  '_': 1
  _: 0
}

// ===== Pattern Compiler Functions =====

// Parse a regex string into our Pattern data structure (simplified)
@parse_regex(regex) = ~regex {
  // Literal strings
  "GET": #Literal{text: "GET"}
  "POST": #Literal{text: "POST"}
  "hello": #Literal{text: "hello"}
  
  // Character classes
  "[a-z]": #CharClass{chars: "abcdefghijklmnopqrstuvwxyz"}
  "[0-9]": #CharClass{chars: "0123456789"}
  "[^a-z]": #NegatedClass{chars: "abcdefghijklmnopqrstuvwxyz"}
  
  // Special patterns
  "a*": #Star{pattern: #Char{char: 'a'}}
  "a+": #Plus{pattern: #Char{char: 'a'}}
  "a?": #Optional{pattern: #Char{char: 'a'}}
  "a{3,5}": #Repeat{pattern: #Char{char: 'a'}, min: 3, max: 5}
  
  // Concatenations
  "ab": #Concat{
    first: #Char{char: 'a'},
    second: #Char{char: 'b'}
  }
  
  // Choice
  "a|b": #Choice{
    left: #Char{char: 'a'},
    right: #Char{char: 'b'}
  }
  
  // Fallback for unknown patterns
  _: #Literal{text: regex}
}

// ===== Pattern Caching =====

// Cache data structure
data PatternCache {
  #Empty
  #Node { pattern_str pattern next }
}

// Initialize empty pattern cache
@init_pattern_cache = #Empty

// Look up a pattern in the cache or parse it if not found
@get_or_parse_pattern(cache, regex) = ~cache {
  #Empty:
    // Pattern not in cache, parse it and add to cache
    let parsed_pattern = @parse_regex(regex)
    let new_cache = #Node{regex, parsed_pattern, #Empty}
    {new_cache, parsed_pattern}
  
  #Node{pattern_str, pattern, next}:
    ~(== pattern_str regex) {
      true: 
        // Found in cache
        {cache, pattern}
      false: 
        // Not this node, check next node
        let {new_next, found_pattern} = @get_or_parse_pattern(next, regex)
        {#Node{pattern_str, pattern, new_next}, found_pattern}
    }
}

// Parse and cache a regex pattern
@parse_and_cache_regex(regex, cache) =
  let {new_cache, pattern} = @get_or_parse_pattern(cache, regex)
  {new_cache, pattern}

// ===== Parallel Matching Helper =====

// Match multiple patterns against the same string in parallel
// This is particularly useful for IDS/IPS rule matching where we have
// many patterns to check against the same input
@match_patterns(patterns str pos) =
  @match_patterns_iter(patterns str pos [])

// Iterator for parallel pattern matching
@match_patterns_iter(patterns str pos results) = ~patterns {
  []: results  // No more patterns, return collected results
  [pattern, ...rest]:
    // Match current pattern and continue with rest
    // HVM will automatically parallelize these operations
    let result = @match_optimized(pattern str pos)
    let new_results = @append(results result)
    @match_patterns_iter(rest str pos new_results)
}

// Helper to append to a list
@append(list item) = ~list {
  []: [item]
  [head, ...tail]: [head, ...@append(tail item)]
}

// ===== Pattern Optimizations =====

// Check if a pattern is anchored at the start
@is_anchored_start(pattern) = ~pattern {
  #Anchor{type}: ~type { #Start: 1 _: 0 }
  #Concat{first second}: @is_anchored_start(first)
  _: 0  // All other patterns are not anchored
}

// Check if a pattern is anchored at the end
@is_anchored_end(pattern) = ~pattern {
  #Anchor{type}: ~type { #End: 1 _: 0 }
  #Concat{first second}: @is_anchored_end(second)
  _: 0  // All other patterns are not anchored
}

// Extract a literal prefix from a pattern (if it has one)
@extract_literal_prefix(pattern) = ~pattern {
  #Literal{text}: 
    // Direct literal
    { text, #None }
    
  #Concat{first second}:
    // Check if first part is a literal
    ~first {
      #Literal{text}: 
        // First part is literal, return it
        { text, #Some{second} }
      _: 
        // No literal prefix
        { "", #Some{pattern} }
    }
    
  _: 
    // No literal prefix
    { "", #Some{pattern} }
}

// Optimized match function that selects the matching strategy
// based on pattern analysis
@match_optimized(pattern str pos) =
  // First check if pattern is anchored
  ~@is_anchored_start(pattern) {
    true:
      // Anchored at start - only try at position 0
      ~(== pos 0) {
        true: @match(pattern str pos)
        false: #NoMatch  // Can't match anchored pattern except at start
      }
    false:
      // Check for literal prefix optimization
      let {prefix, remainder} = @extract_literal_prefix(pattern)
      
      ~(== prefix "") {
        true: 
          // No literal prefix, use regular matching
          @match(pattern str pos)
        false:
          // Has literal prefix, check it first as a fast path
          ~@is_prefix(prefix str pos) {
            true:
              // Prefix matched, continue with remainder
              let prefix_len = (len prefix)
              let new_pos = (+ pos prefix_len)
              
              ~remainder {
                #None: 
                  // Just the prefix, no remainder
                  #Match{pos prefix_len}
                #Some{rest}:
                  // Match remainder
                  let rest_result = @match(rest str new_pos)
                  
                  ~rest_result {
                    #Match{rest_pos rest_len}: 
                      // Combine prefix match with remainder match
                      #Match{pos (+ prefix_len rest_len)}
                    #NoMatch: #NoMatch
                  }
              }
            false: #NoMatch  // Prefix didn't match
          }
      }
  }

// ===== Future Enhancement Opportunities =====

/* 
PERFORMANCE ENHANCEMENT ROADMAP

The implementation already uses several optimization techniques like pattern caching,
parallel matching with HVM's natural parallelism, and specialized matchers for
anchored patterns. However, several further optimizations could be implemented:

1. Data Structure Optimizations
   - Replace character classes with bit vectors for faster membership checks:
     * Create a 128-bit (or 256-bit for Unicode) vector for faster O(1) lookups
     * Each bit position represents a character code point
     * This avoids scanning the character class string for each check

   - Implement a compact NFA (Non-deterministic Finite Automaton) representation:
     * Convert regex patterns to a more efficient state machine
     * Use array-based representation instead of recursive data types
     * Allow direct indexing into the state machine instead of recursive pattern matching

2. Algorithm Improvements
   - Replace recursive backtracking with Thompson NFA algorithm:
     * Current implementation can have exponential time complexity in worst case
     * Thompson NFA guarantees linear time complexity relative to input length
     * Maintains sets of active states during matching

   - Add pre-compilation phase for complex patterns:
     * Analyze pattern structure to identify common subpatterns
     * Pre-compute state transitions for faster execution
     * Eliminate redundant computations during matching

   - Implement Boyer-Moore-style optimizations for literal search:
     * Skip characters during matching based on character occurrence information
     * Significantly speed up literal search, especially for longer patterns

   - Add specialized matchers for common regex idioms:
     * Special handling for patterns like "[a-z]+" or "\\d{3,5}"
     * Fused operations for common combinations
     * Avoid general pattern machinery for simple cases

3. Memory Optimizations
   - Use flyweight pattern to share common pattern components
   - Implement lazy evaluation for star/plus operators
   - Add specialized string representations for efficient substring operations

4. Parallelism Improvements
   - Implement pattern segmentation for very long inputs
   - Add automatic pattern partitioning for optimal parallel execution
   - Develop heuristics to decide when to use parallelism vs. sequential execution
*/

// ===== Benchmark Function =====

// Main test function
@main =
  // Create some test patterns
  let p1 = #Literal{text: "GET"}
  let p2 = #Char{char: 'a'}
  let p3 = #Concat{
    first: #Char{char: 'h'},
    second: #Char{char: 'i'}
  }
  let p4 = #Star{pattern: #Char{char: 'a'}}
  let p5 = #Plus{pattern: #Char{char: 'a'}}
  let p6 = #Choice{
    left: #Literal{text: "GET"},
    right: #Literal{text: "POST"}
  }
  
  // Test strings
  let s1 = "GET /index.html"
  let s2 = "apple"
  let s3 = "hi there"
  let s4 = "aaabc"
  let s5 = "POST /form"
  
  // Initialize pattern cache
  let cache = @init_pattern_cache
  
  // Run matches with optimized matcher
  let m1 = @match_optimized(p1 s1 0)   // Should match "GET" at pos 0
  let m2 = @match_optimized(p2 s2 0)   // Should match 'a' at pos 0
  let m3 = @match_optimized(p3 s3 0)   // Should match "hi" at pos 0
  let m4 = @match_optimized(p4 s4 0)   // Should match "aaa" at pos 0
  let m5 = @match_optimized(p5 s4 0)   // Should match "aaa" at pos 0
  let m6 = @match_optimized(p6 s5 0)   // Should match "POST" at pos 0
  
  // Test parallel pattern matching
  let patterns = [p1, p2, p3, p4, p5, p6]
  let parallel_results = @match_patterns(patterns s1 0)
  
  // Return both individual and parallel results
  {
    individual: [m1, m2, m3, m4, m5, m6],
    parallel: parallel_results
  }