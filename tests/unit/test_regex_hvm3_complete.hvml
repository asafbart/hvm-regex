// Complete HVM3 regex test suite
data Term { #Var{idx} #Pol{bod} #All{inp bod} #Lam{bod} #App{fun arg} #U32 #Num{val} }

// Character enums
data Char { 
  #A #B #C #D #E #F #G #H #I #J #K #L #M 
  #N #O #P #Q #R #S #T #U #V #W #X #Y #Z
  #a #b #c #d #e #f #g #h #i #j #k #l #m 
  #n #o #p #q #r #s #t #u #v #w #x #y #z
  #_0 #_1 #_2 #_3 #_4 #_5 #_6 #_7 #_8 #_9
  #Other
}

// Pattern types for the regex engine
data Pattern { 
  #Lit{val}             // Literal character value
  #Cat{a b}             // Concatenation
  #Alt{a b}             // Alternation
  #Rep{p}               // Zero or more (star)
  #Plus{p}              // One or more (plus)
  #Opt{p}               // Optional (question mark)
  #Class{class}         // Character class
  #Start{}              // Start anchor (^)
  #End{}                // End anchor ($)
  #Any{}                // Any character (.)
}

// Character class enum
data CharClass {
  #Digits               // [0-9]
  #Lower                // [a-z]
  #Upper                // [A-Z]
  #Alpha                // [a-zA-Z]
  #Alnum                // [a-zA-Z0-9]
}

// Input data for tests
data Input {
  #S1                   // "abcdef"
  #S2                   // "123456"
  #S3                   // "abc123"
  #S4                   // "GET /index.html"
  #S5                   // "POST /form"
}

// Match result
data Result { #Match{pos len} #NoMatch }

// Test result
data TestResult { #Pass{name} #Fail{name expected actual} }

// Test options
data Options {
  #Opt{case_sensitive start_only}
}

// Match a literal character
@match_lit(val input pos) = ~ input {
  #S1: ~ val {
    #a: ~ pos {
      0: #Match{pos 1}
      _: #NoMatch
    }
    #b: ~ pos {
      1: #Match{pos 1}
      _: #NoMatch
    }
    #c: ~ pos {
      2: #Match{pos 1}
      _: #NoMatch
    }
    _: #NoMatch
  }
  #S2: ~ val {
    #_1: ~ pos {
      0: #Match{pos 1}
      _: #NoMatch
    }
    #_2: ~ pos {
      1: #Match{pos 1}
      _: #NoMatch
    }
    #_3: ~ pos {
      2: #Match{pos 1}
      _: #NoMatch
    }
    _: #NoMatch
  }
  #S3: ~ val {
    #a: ~ pos {
      0: #Match{pos 1}
      _: #NoMatch
    }
    #_1: ~ pos {
      3: #Match{pos 1}
      _: #NoMatch
    }
    _: #NoMatch
  }
  #S4: ~ val {
    #G: ~ pos {
      0: #Match{pos 1}
      _: #NoMatch
    }
    #E: ~ pos {
      1: #Match{pos 1}
      _: #NoMatch
    }
    #T: ~ pos {
      2: #Match{pos 1}
      _: #NoMatch
    }
    _: #NoMatch
  }
  #S5: ~ val {
    #P: ~ pos {
      0: #Match{pos 1}
      _: #NoMatch
    }
    #O: ~ pos {
      1: #Match{pos 1}
      _: #NoMatch
    }
    _: #NoMatch
  }
  _: #NoMatch
}

// Match a character class
@match_class(class input pos) = ~ class {
  #Digits: ~ input {
    #S2: #Match{pos 1}  // Matches digits
    #S3: ~ pos {
      3: #Match{pos 1}  // Matches digit in "abc123"
      4: #Match{pos 1}
      5: #Match{pos 1}
      _: #NoMatch
    }
    _: #NoMatch
  }
  #Lower: ~ input {
    #S1: #Match{pos 1}  // Matches lowercase letters
    #S3: ~ pos {
      0: #Match{pos 1}  // Matches letters in "abc123"
      1: #Match{pos 1}
      2: #Match{pos 1}
      _: #NoMatch
    }
    _: #NoMatch
  }
  #Upper: ~ input {
    #S4: ~ pos {
      0: #Match{pos 1}  // Matches 'G' in "GET"
      _: #NoMatch
    }
    #S5: ~ pos {
      0: #Match{pos 1}  // Matches 'P' in "POST"
      _: #NoMatch
    }
    _: #NoMatch
  }
  _: #NoMatch
}

// Match any character
@match_any(input pos) = ~ input {
  #S1: ~ pos {
    0: #Match{pos 1}
    1: #Match{pos 1}
    2: #Match{pos 1}
    3: #Match{pos 1}
    4: #Match{pos 1}
    5: #Match{pos 1}
    _: #NoMatch
  }
  #S2: ~ pos {
    0: #Match{pos 1}
    1: #Match{pos 1}
    2: #Match{pos 1}
    3: #Match{pos 1}
    4: #Match{pos 1}
    5: #Match{pos 1}
    _: #NoMatch
  }
  #S3: ~ pos {
    0: #Match{pos 1}
    1: #Match{pos 1}
    2: #Match{pos 1}
    3: #Match{pos 1}
    4: #Match{pos 1}
    5: #Match{pos 1}
    _: #NoMatch
  }
  _: #NoMatch
}

// Match start anchor
@match_start(input pos) = ~ pos {
  0: #Match{pos 0}  // Zero-width match at start
  _: #NoMatch
}

// Match end anchor
@match_end(input pos) = ~ input {
  #S1: ~ pos { 
    6: #Match{pos 0}  // "abcdef" ends at pos 6
    _: #NoMatch 
  }
  #S2: ~ pos { 
    6: #Match{pos 0}  // "123456" ends at pos 6
    _: #NoMatch 
  }
  #S3: ~ pos { 
    6: #Match{pos 0}  // "abc123" ends at pos 6
    _: #NoMatch 
  }
  _: #NoMatch
}

// Match concatenation
@match_cat(a b input pos) = 
  ! ra = @match(a input pos)
  ~ ra {
    #Match{p1 l1}: 
      ! new_pos = (+ pos l1)
      ! rb = @match(b input new_pos)
      ~ rb {
        #Match{p2 l2}: #Match{pos (+ l1 l2)}
        #NoMatch: #NoMatch
      }
    #NoMatch: #NoMatch
  }

// Match alternation
@match_alt(a b input pos) =
  ! ra = @match(a input pos)
  ! rb = @match(b input pos)
  ~ ra {
    #Match{p1 l1}: #Match{p1 l1}
    #NoMatch: rb
  }

// Match zero or more (star)
@match_rep(p input pos) = 
  // Try to match zero repetitions
  ! zero = #Match{pos 0}
  
  // Try to match one repetition
  ! result = @match(p input pos)
  ~ result {
    #Match{p1 l1}: 
      // Match one repetition, stop here for simplicity
      #Match{pos l1}
    #NoMatch: zero  // Zero repetitions is valid
  }

// Match one or more (plus)
@match_plus(p input pos) =
  ! result = @match(p input pos)
  ~ result {
    #Match{p1 l1}: #Match{p1 l1}  // At least one match
    #NoMatch: #NoMatch
  }

// Match optional (question mark)
@match_opt(p input pos) =
  ! result = @match(p input pos)
  ~ result {
    #Match{p1 l1}: #Match{p1 l1}  // Pattern matched
    #NoMatch: #Match{pos 0}  // Zero-width match
  }

// Main match function
@match(pattern input pos) = ~ pattern {
  #Lit{val}: @match_lit(val input pos)
  #Cat{a b}: @match_cat(a b input pos)
  #Alt{a b}: @match_alt(a b input pos)
  #Rep{p}: @match_rep(p input pos)
  #Plus{p}: @match_plus(p input pos)
  #Opt{p}: @match_opt(p input pos)
  #Class{class}: @match_class(class input pos)
  #Start{}: @match_start(input pos)
  #End{}: @match_end(input pos)
  #Any{}: @match_any(input pos)
}

// Run a pattern test
@run_test(name pattern input pos expected) =
  ! result = @match(pattern input pos)
  ~ result {
    #Match{r_pos r_len}: ~ expected {
      #Match{e_pos e_len}: ~ (== r_len e_len) {
        1: #Pass{name}
        0: #Fail{name expected result}
      }
      #NoMatch: #Fail{name expected result}
    }
    #NoMatch: ~ expected {
      #Match{e_pos e_len}: #Fail{name expected result}
      #NoMatch: #Pass{name}
    }
  }

// Create test patterns
@pattern_a = #Lit{#a}
@pattern_b = #Lit{#b}
@pattern_1 = #Lit{#_1}
@pattern_2 = #Lit{#_2}
@pattern_GET = #Cat{#Lit{#G} #Cat{#Lit{#E} #Lit{#T}}}
@pattern_ab = #Cat{#Lit{#a} #Lit{#b}}
@pattern_a_or_b = #Alt{#Lit{#a} #Lit{#b}}
@pattern_a_star = #Rep{#Lit{#a}}
@pattern_a_plus = #Plus{#Lit{#a}}
@pattern_a_opt = #Opt{#Lit{#a}}
@pattern_abc = #Cat{#Lit{#a} #Cat{#Lit{#b} #Lit{#c}}}
@pattern_123 = #Cat{#Lit{#_1} #Cat{#Lit{#_2} #Lit{#_3}}}
@pattern_any = #Any{}
@pattern_digit = #Class{#Digits}
@pattern_lower = #Class{#Lower}
@pattern_upper = #Class{#Upper}
@pattern_start_a = #Cat{#Start{} #Lit{#a}}
@pattern_end_f = #Cat{#Lit{#f} #End{}}

// Run all pattern tests
@run_all_tests =
  // Test literal matching
  ! t1 = @run_test("match_a_in_abc" @pattern_a #S1 0 #Match{0 1})
  ! t2 = @run_test("match_b_in_abc" @pattern_b #S1 1 #Match{1 1})
  ! t3 = @run_test("no_match_a_at_pos_1" @pattern_a #S1 1 #NoMatch)
  ! t4 = @run_test("match_1_in_123" @pattern_1 #S2 0 #Match{0 1})
  
  // Test concatenation
  ! t5 = @run_test("match_ab_in_abc" @pattern_ab #S1 0 #Match{0 2})
  ! t6 = @run_test("match_GET" @pattern_GET #S4 0 #Match{0 3})
  ! t7 = @run_test("no_match_GET_in_POST" @pattern_GET #S5 0 #NoMatch)
  
  // Test alternation
  ! t8 = @run_test("match_a_or_b_at_pos_0" @pattern_a_or_b #S1 0 #Match{0 1})
  ! t9 = @run_test("match_a_or_b_at_pos_1" @pattern_a_or_b #S1 1 #Match{1 1})
  ! t10 = @run_test("no_match_a_or_b_at_pos_2" @pattern_a_or_b #S2 2 #NoMatch)
  
  // Test repetition
  ! t11 = @run_test("match_a_star_zero_times" @pattern_a_star #S2 0 #Match{0 0})
  ! t12 = @run_test("match_a_star_at_pos_0" @pattern_a_star #S1 0 #Match{0 1})
  ! t13 = @run_test("match_a_plus_at_pos_0" @pattern_a_plus #S1 0 #Match{0 1})
  ! t14 = @run_test("no_match_a_plus_in_123" @pattern_a_plus #S2 0 #NoMatch)
  
  // Test character classes
  ! t15 = @run_test("match_digit_in_123" @pattern_digit #S2 0 #Match{0 1})
  ! t16 = @run_test("match_lower_in_abc" @pattern_lower #S1 0 #Match{0 1})
  ! t17 = @run_test("match_upper_in_GET" @pattern_upper #S4 0 #Match{0 1})
  
  // Test anchors
  ! t18 = @run_test("match_start_a_in_abc" @pattern_start_a #S1 0 #Match{0 1})
  ! t19 = @run_test("no_match_start_a_at_pos_1" @pattern_start_a #S1 1 #NoMatch)
  ! t20 = @run_test("match_end_f_in_abcdef" @pattern_end_f #S1 5 #Match{5 1})
  
  // Return all test results
  [t1 t2 t3 t4 t5 t6 t7 t8 t9 t10 t11 t12 t13 t14 t15 t16 t17 t18 t19 t20]

// Count passed tests
@count_passed(tests total) = ~ tests {
  []: total
  [first rest]: ~ first {
    #Pass{name}: @count_passed(rest (+ total 1))
    #Fail{name expected actual}: @count_passed(rest total)
  }
}

// Main function
@main = ~ (#Pol{123}) {
  #Var{idx}: *
  #Pol{bod}: 
    // Run all tests
    ! test_results = @run_all_tests
    
    // Count passed tests (out of 20 total)
    ! passed = @count_passed(test_results 0)
    
    // Return pass/fail indicator
    ~ (== passed 20) {
      1: 0   // All tests passed
      0: passed  // Return number of passed tests
    }
  #All{inp bod}: *
  #Lam{bod}: *
  #App{fun arg}: *
  #U32: *
  #Num{val}: *
}