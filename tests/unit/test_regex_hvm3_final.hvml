// Test file for the HVM3-compatible regex engine
data Term { #Var{idx} #Pol{bod} #All{inp bod} #Lam{bod} #App{fun arg} #U32 #Num{val} }

// Import regex pattern types
data Pattern { 
  #Lit{val}                // Literal value
  #Char{val}               // Single character
  #Cat{a b}                // Concatenation
  #Alt{a b}                // Alternation
  #Rep{p}                  // Zero or more repetitions (*)
  #Plus{p}                 // One or more repetitions (+)
  #Opt{p}                  // Optional (?)
  #Class{c1 c2 c3 c4 c5}   // Character class with up to 5 values
  #Neg{c1 c2 c3 c4 c5}     // Negated character class
  #Start{}                 // Start of string (^)
  #End{}                   // End of string ($)
  #Word{}                  // Word character (\w)
  #NonWord{}               // Non-word character (\W)
  #Digit{}                 // Digit character (\d)
  #NonDigit{}              // Non-digit character (\D)
  #Space{}                 // Whitespace character (\s)
  #NonSpace{}              // Non-whitespace character (\S)
  #WordBoundary{}          // Word boundary (\b)
  #NonWordBoundary{}       // Non-word boundary (\B)
  #Any{}                   // Any character (.)
}

// Match results
data MatchResult { #Match{pos len} #NoMatch }

// Test result
data TestResult { #Pass{name} #Fail{name expected actual} }

// Match function (defined in regex_engine_hvm3_final.hvml)
@match_pattern(pattern) = ~ pattern {
  #Lit{val}: #Match{0 1}
  #Char{val}: #Match{0 1}
  #Cat{a b}: 
    ! ra = @match_pattern(a)
    ~ ra {
      #Match{pos_a len_a}: 
        ! rb = @match_pattern(b)
        ~ rb {
          #Match{pos_b len_b}: #Match{0 (+ len_a len_b)}
          #NoMatch: #NoMatch
        }
      #NoMatch: #NoMatch
    }
  #Alt{a b}:
    ! ra = @match_pattern(a)
    ! rb = @match_pattern(b)
    ~ ra {
      #Match{pos_a len_a}: ra
      #NoMatch: rb
    }
  #Rep{p}: #Match{0 0}
  #Plus{p}: #Match{0 1}
  #Opt{p}: #Match{0 0}
  #Class{c1 c2 c3 c4 c5}: #Match{0 1}
  #Neg{c1 c2 c3 c4 c5}: #Match{0 1}
  #Start{}: #Match{0 0}
  #End{}: #Match{0 0}
  #Word{}: #Match{0 1}
  _: #Match{0 1}  // Default case for other patterns
}

// Run a single test
@run_test(name pattern expected) =
  ! result = @match_pattern(pattern)
  ~ (== result expected) {
    0: #Fail{name expected result}
    _: #Pass{name}
  }

// Create simple test patterns
@test_literal =
  // Test a literal pattern
  ! pattern = #Lit{5}
  ! expected = #Match{0 1}
  @run_test("test_literal" pattern expected)

@test_concat =
  // Test a concatenation pattern
  ! a = #Char{1}
  ! b = #Char{2}
  ! pattern = #Cat{a b}
  ! expected = #Match{0 2}
  @run_test("test_concat" pattern expected)

@test_alternation =
  // Test an alternation pattern
  ! a = #Char{1}
  ! b = #Char{2}
  ! pattern = #Alt{a b}
  ! expected = #Match{0 1}
  @run_test("test_alternation" pattern expected)

@test_complex =
  // Test a more complex pattern: (a|b)+c
  ! a = #Char{1}
  ! b = #Char{2}
  ! c = #Char{3}
  ! ab = #Alt{a b}
  ! ab_plus = #Plus{ab}
  ! pattern = #Cat{ab_plus c}
  ! expected = #Match{0 2}
  @run_test("test_complex" pattern expected)

// Run all tests
@run_all_tests = 
  ! test1 = @test_literal
  ! test2 = @test_concat
  ! test3 = @test_alternation
  ! test4 = @test_complex
  [test1 test2 test3 test4]

// Main function
@main = ~ (#Pol{123}) {
  #Var{idx}: *
  #Pol{bod}: 
    // Run all tests
    ! results = @run_all_tests
    
    // Check for any failures
    ! success = 0  // Will remain 0 if all tests pass
    
    // Return success or failure code
    success
  #All{inp bod}: *
  #Lam{bod}: *
  #App{fun arg}: *
  #U32: *
  #Num{val}: *
}