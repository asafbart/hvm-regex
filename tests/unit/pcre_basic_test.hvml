// Basic PCRE regex tests for HVM3
data Term { #Var{idx} #Pol{bod} #All{inp bod} #Lam{bod} #App{fun arg} #U32 #Num{val} }

// Character enums
data Char { 
  #A #B #C #D #E #F #G #H #I #J #K #L #M 
  #N #O #P #Q #R #S #T #U #V #W #X #Y #Z
  #a #b #c #d #e #f #g #h #i #j #k #l #m 
  #n #o #p #q #r #s #t #u #v #w #x #y #z
  #_0 #_1 #_2 #_3 #_4 #_5 #_6 #_7 #_8 #_9
  #Space #Period #Comma #Colon #Semicolon
  #Plus #Minus #Star #Slash #Equals #At
  #Dot #Bang #Question #Hash #Dollar #Percent
  #Amp #Lparen #Rparen #Lbrack #Rbrack #Lbrace #Rbrace
  #Caret #Underscore #Pipe #Backslash
  #Other
}

// Pattern types for the regex engine
data Pattern { 
  #Lit{val}             // Literal character value
  #Cat{a b}             // Concatenation
  #Alt{a b}             // Alternation
  #Rep{p}               // Zero or more (star)
  #Plus{p}              // One or more (plus)
  #Opt{p}               // Optional (question mark)
  #Class{chars}         // Character class
  #NegClass{chars}      // Negated character class
  #Start{}              // Start anchor (^)
  #End{}                // End anchor ($)
  #Any{}                // Any character (.)
  #Group{p}             // Capturing group
  #BackRef{n}           // Backreference
  #WordBoundary{}       // Word boundary (\b)
  #NotWordBoundary{}    // Not word boundary (\B)
  #Digit{}              // Digit (\d)
  #NotDigit{}           // Not digit (\D)
  #Word{}               // Word character (\w)
  #NotWord{}            // Not word character (\W)
  #Space{}              // Whitespace (\s)
  #NotSpace{}           // Not whitespace (\S)
}

// Match result
data Result { #Match{pos len} #NoMatch }

// Test result
data TestResult { #Pass{name} #Fail{name expected actual} }

// String data for tests
data String {
  #Empty
  #Hello           // "hello"
  #World           // "world"
  #HelloWorld      // "hello world"
  #Number123       // "123"
  #AlphaNum123     // "abc123"
  #Email           // "test@example.com"
  #URL             // "https://example.com"
  #Date            // "2023-03-15"
  #IPAddress       // "192.168.1.1"
  #HTMLTag         // "<div>content</div>"
  #JSONData        // "{"name":"value"}"
  #LogLine         // "[INFO] User logged in: user123"
  #MultiLine       // "Line 1\nLine 2\nLine 3"
}

// Mock regex parser (to be implemented fully)
@parse_regex(pattern) = ~ pattern {
  // Basic patterns
  "a": #Lit{#a}
  "b": #Lit{#b}
  "c": #Lit{#c}
  "abc": #Cat{#Lit{#a} #Cat{#Lit{#b} #Lit{#c}}}
  "a|b": #Alt{#Lit{#a} #Lit{#b}}
  "a*": #Rep{#Lit{#a}}
  "a+": #Plus{#Lit{#a}}
  "a?": #Opt{#Lit{#a}}
  "[abc]": #Class{[#a #b #c]}
  "[^abc]": #NegClass{[#a #b #c]}
  ".": #Any{}
  "^a": #Cat{#Start{} #Lit{#a}}
  "a$": #Cat{#Lit{#a} #End{}}
  "\\d": #Digit{}
  "\\w": #Word{}
  "\\s": #Space{}
  "\\b": #WordBoundary{}
  "(a)": #Group{#Lit{#a}}
  "\\1": #BackRef{1}
  "(a)\\1": #Cat{#Group{#Lit{#a}} #BackRef{1}}
  
  // Complex patterns
  "a|b|c": #Alt{#Lit{#a} #Alt{#Lit{#b} #Lit{#c}}}
  "a*b+c?": #Cat{#Rep{#Lit{#a}} #Cat{#Plus{#Lit{#b}} #Opt{#Lit{#c}}}}
  "[a-z]": #Class{[#a #b #c #d #e #f]}  // Simplified for this test
  "[0-9]+": #Plus{#Digit{}}
  "^[a-z]+$": #Cat{#Start{} #Cat{#Plus{#Class{[#a #b #c #d #e #f]}} #End{}}}
  "\\w+@\\w+\\.\\w+": #Cat{#Plus{#Word{}} #Cat{#Lit{#At} #Cat{#Plus{#Word{}} #Cat{#Lit{#Dot} #Plus{#Word{}}}}}}
  
  // Default case for unrecognized patterns
  _: #Lit{#Other}
}

// Mock regex match function (to be implemented fully)
@match_regex(pattern input pos) = ~ pattern {
  #Lit{val}: ~ input {
    #Hello: ~ val {
      #h: ~ pos {
        0: #Match{pos 1}
        _: #NoMatch
      }
      #e: ~ pos {
        1: #Match{pos 1}
        _: #NoMatch
      }
      _: #NoMatch
    }
    #World: ~ val {
      #w: ~ pos {
        0: #Match{pos 1}
        _: #NoMatch
      }
      #o: ~ pos {
        1: #Match{pos 1}
        _: #NoMatch
      }
      _: #NoMatch
    }
    _: #NoMatch
  }
  
  #Cat{a b}: 
    ! match_a = @match_regex(a input pos)
    ~ match_a {
      #Match{p1 l1}: 
        ! pos_b = (+ pos l1)
        ! match_b = @match_regex(b input pos_b)
        ~ match_b {
          #Match{p2 l2}: #Match{pos (+ l1 l2)}
          #NoMatch: #NoMatch
        }
      #NoMatch: #NoMatch
    }
  
  #Alt{a b}:
    ! match_a = @match_regex(a input pos)
    ! match_b = @match_regex(b input pos)
    ~ match_a {
      #Match{p l}: match_a
      #NoMatch: match_b
    }
  
  #Rep{p}: #Match{pos 0}  // Simplified for this test
  #Plus{p}: @match_regex(p input pos)  // Simplified for this test
  #Opt{p}: 
    ! match_p = @match_regex(p input pos)
    ~ match_p {
      #Match{p1 l1}: match_p
      #NoMatch: #Match{pos 0}
    }
  
  #Start{}: ~ pos {
    0: #Match{pos 0}
    _: #NoMatch
  }
  
  #End{}: ~ input {
    #Hello: ~ pos {
      5: #Match{pos 0}
      _: #NoMatch
    }
    #World: ~ pos {
      5: #Match{pos 0}
      _: #NoMatch
    }
    _: #NoMatch
  }
  
  _: #NoMatch  // Default case for unimplemented patterns
}

// Test a regex pattern against an input
@test_pattern(name pattern_str input pos expected) =
  ! pattern = @parse_regex(pattern_str)
  ! result = @match_regex(pattern input pos)
  ~ (== result expected) {
    1: #Pass{name}
    0: #Fail{name expected result}
  }

// Run several basic PCRE tests
@run_basic_tests = 
  ! test1 = @test_pattern("test_literal_a" "a" #Hello 0 #NoMatch)
  ! test2 = @test_pattern("test_literal_h" "h" #Hello 0 #Match{0 1})
  ! test3 = @test_pattern("test_literal_w" "w" #World 0 #Match{0 1})
  ! test4 = @test_pattern("test_concat" "he" #Hello 0 #Match{0 2})
  ! test5 = @test_pattern("test_alternative" "h|w" #World 0 #Match{0 1})
  ! test6 = @test_pattern("test_start_anchor" "^h" #Hello 0 #Match{0 1})
  ! test7 = @test_pattern("test_end_anchor" "d$" #World 0 #NoMatch)
  
  // Return all test results
  [test1 test2 test3 test4 test5 test6 test7]

// Count passed tests
@count_passed(tests total) = ~ tests {
  []: total
  [first rest]: ~ first {
    #Pass{name}: @count_passed(rest (+ total 1))
    #Fail{name expected actual}: @count_passed(rest total)
  }
}

// Main function
@main = ~ (#Pol{123}) {
  #Var{idx}: *
  #Pol{bod}: 
    // Run all tests
    ! test_results = @run_basic_tests
    
    // Count passed tests
    ! passed = @count_passed(test_results 0)
    ! total = 7  // Total number of tests
    
    // Return success percentage
    ! success_percent = (/ (* passed 100) total)
    success_percent
  #All{inp bod}: *
  #Lam{bod}: *
  #App{fun arg}: *
  #U32: *
  #Num{val}: *
}